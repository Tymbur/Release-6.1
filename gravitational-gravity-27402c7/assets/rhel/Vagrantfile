# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # create a new volume (vdi file)
  def attach_media(vb, controller_name, device, port)
    vdi_file = vb.name + device + ".vdi"
    unless File.exist?(vdi_file)
       vb.customize ["createhd", "--filename", vdi_file, "--size", 10 * 1024]
    end
    vb.customize ["storageattach", :id, "--storagectl", controller_name, "--port", port, 
                  "--device", 0, "--type", "hdd", "--medium", vdi_file]
  end

  # mount a volume using the specified filesystem on the given device
  def mount_volume(vm, fs, volume, device)
    vm.provision "shell", inline: <<-SHELL
      echo "mounting #{fs}..."
      mkfs.#{fs} -f /dev/#{device}
      mkdir -p #{volume}
      rm -rf #{volume}/*
      mount /dev/#{device} #{volume}
      if ! grep -q "#{fs}" /etc/fstab ; then 
         echo "/dev/#{device} #{volume}  #{fs} defaults   0 0" >> /etc/fstab
      fi
  SHELL
  end

  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "mrlesmithjr/rhel-7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  config.vm.network "private_network", type: "dhcp"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # fix grub to turn on memory cgroup
  config.vm.provision "shell", inline: <<-SHELL
    echo $(netstat -rn | grep UG | awk '{print $2}') opscenter.localhost.localdomain >> /etc/hosts
    echo "[SITE] Set up /etc/hosts "
  SHELL

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.define "master" do |node|
    node.vm.hostname = "master"
    node.vm.provider "virtualbox" do |vb|
      vb.name = node.vm.hostname
      vb.cpus = 1
      vb.memory = 2200
      attach_media(vb, "SATA Controller", "sdb", 1) # /var/lib/gravity
      attach_media(vb, "SATA Controller", "sdc", 2) # devicemapper PV
    end
    mount_volume(node.vm, "xfs", "/var/lib/gravity", "sdb")
  end

  config.vm.define "node-1" do |node|
    node.vm.hostname = "node-1"
    node.vm.provider "virtualbox" do |vb|
      vb.name = node.vm.hostname
      vb.cpus = 1
      vb.memory = 800
      attach_media(vb, "SATA Controller", "sdb", 1) # /var/lib/gravity
      attach_media(vb, "SATA Controller", "sdc", 2) # devicemapper PV
    end
    mount_volume(node.vm, "xfs", "/var/lib/gravity", "sdb")
  end

  config.vm.define "node-2" do |node|
    node.vm.hostname = "node-2"
    node.vm.provider "virtualbox" do |vb|
      vb.name = node.vm.hostname
      vb.cpus = 1
      vb.memory = 800
      attach_media(vb, "SATA Controller", "sdb", 1) # /var/lib/gravity
      attach_media(vb, "SATA Controller", "sdc", 2) # devicemapper PV
    end
    mount_volume(node.vm, "xfs", "/var/lib/gravity", "sdb")
  end
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
